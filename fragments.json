[
    {
      "title": "React useState Hook ",
      "code": "import React, { useState } from 'react';\n\nfunction Counter() {\n  // Declare a state variable \"count\" with initial value 0\n  const [count, setCount] = useState(0);\n  \n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>\n        Click me\n      </button>\n    </div>\n  );\n}\n\nexport default Counter;",
      "tags": [
        "1741267099852"
      ],
      "id": "1741263346307"
    },
    {
      "title": "made full",
      "code": "import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport Header from '../components/Header';\nimport DataStore from '../services/dataStore';\nimport { highlightCode } from '../services/syntaxHighlighter';\nimport './assets/styles/FragmentFormPage.css'; \n\nconst FragmentFormPage = ({ fragments, setFragments, tags, darkMode, toggleDarkMode }) => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  \n  const [fragment, setFragment] = useState({\n    title: '',\n    code: '',\n    tags: []\n  });\n  \n  const [isEditing, setIsEditing] = useState(false);\n  \n  // Load fragment data if editing an existing one\n  useEffect(() => {\n    if (id && id !== 'new') {\n      const fragmentToEdit = fragments.find(f => f.id === id);\n      if (fragmentToEdit) {\n        setFragment(fragmentToEdit);\n        setIsEditing(true);\n      } else {\n        // Fragment not found, redirect to new fragment form\n        navigate('/fragment/new');\n      }\n    }\n  }, [id, fragments, navigate]);\n  \n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFragment(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  \n  const handleTagChange = (tagId) => {\n    setFragment(prev => {\n      const currentTags = prev.tags || [];\n      \n      // If tag is already selected, remove it\n      if (currentTags.includes(tagId)) {\n        return {\n          ...prev,\n          tags: currentTags.filter(id => id !== tagId)\n        };\n      }\n      \n      // Otherwise, add it\n      return {\n        ...prev,\n        tags: [...currentTags, tagId]\n      };\n    });\n  };\n  \n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    if (!fragment.title || !fragment.code) {\n      alert('Title and code are required!');\n      return;\n    }\n    \n    try {\n      const savedFragment = await DataStore.saveFragment(fragment);\n      \n      // Update fragments state with new/updated fragment\n      setFragments(prev => {\n        if (isEditing) {\n          return prev.map(f => f.id === savedFragment.id ? savedFragment : f);\n        } else {\n          return [...prev, savedFragment];\n        }\n      });\n      \n      // Redirect to fragments page\n      navigate('/');\n    } catch (error) {\n      console.error('Error saving fragment:', error);\n      alert('Failed to save fragment. Please try again.');\n    }\n  };\n  \n  const handleDelete = async () => {\n    if (!isEditing) return;\n    \n    if (window.confirm('Are you sure you want to delete this fragment?')) {\n      try {\n        await DataStore.deleteFragment(fragment.id);\n        \n        // Update fragments state\n        setFragments(prev => prev.filter(f => f.id !== fragment.id));\n        \n        // Redirect to fragments page\n        navigate('/');\n      } catch (error) {\n        console.error('Error deleting fragment:', error);\n        alert('Failed to delete fragment. Please try again.');\n      }\n    }\n  };\n  \n  return (\n    <div className=\"fragment-form-page\">\n      <Header \n        toggleDarkMode={toggleDarkMode} \n        darkMode={darkMode} \n      />\n      \n      <main className=\"content\">\n        <div className=\"form-container\">\n          <form onSubmit={handleSubmit}>\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Title</label>\n              <input\n                type=\"text\"\n                id=\"title\"\n                name=\"title\"\n                value={fragment.title}\n                onChange={handleInputChange}\n                placeholder=\"Enter fragment title\"\n                autoFocus\n                required\n              />\n            </div>\n            \n            <div className=\"form-group\">\n              <label htmlFor=\"code\">Code</label>\n              <textarea\n                id=\"code\"\n                name=\"code\"\n                value={fragment.code}\n                onChange={handleInputChange}\n                placeholder=\"Enter your code here\"\n                rows=\"15\"\n                required\n              />\n            </div>\n            \n            <div className=\"form-group\">\n              <label>Tags</label>\n              <div className=\"tags-container\">\n                {tags.map(tag => (\n                  <div key={tag.id} className=\"tag-checkbox\">\n                    <input\n                      type=\"checkbox\"\n                      id={`tag-${tag.id}`}\n                      checked={fragment.tags && fragment.tags.includes(tag.id)}\n                      onChange={() => handleTagChange(tag.id)}\n                    />\n                    <label htmlFor={`tag-${tag.id}`}>{tag.name}</label>\n                  </div>\n                ))}\n              </div>\n            </div>\n            \n            <div className=\"form-actions\">\n              {isEditing && (\n                <button \n                  type=\"button\" \n                  className=\"delete-button\"\n                  onClick={handleDelete}\n                >\n                  Delete\n                </button>\n              )}\n              \n              <button type=\"submit\" className=\"save-button\">\n                Save\n              </button>\n            </div>\n          </form>\n        </div>\n        \n        {fragment.code && (\n          <div className=\"preview-container\">\n            <h3>Preview</h3>\n            <div className={`code-preview ${darkMode ? 'dark' : 'light'}`}>\n              <pre>\n                <code dangerouslySetInnerHTML={{ __html: highlightCode(fragment.code) }} />\n              </pre>\n            </div>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n};\n\nexport default FragmentFormPage;",
      "tags": [
        "1741263484490"
      ],
      "id": "1741263687376"
    },
    {
      "title": "mode in ",
      "code": "import React, { useState, useEffect } from 'react';\nimport Header from '../components/Header';\nimport FragmentCard from '../components/FragmentCard';\nimport CodeModal from '../components/CodeModal';\nimport './assets/styles/FragmentsPage.css'; \n\nconst FragmentsPage = ({ fragments, tags, darkMode, toggleDarkMode }) => {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredFragments, setFilteredFragments] = useState([]);\n  const [selectedFragment, setSelectedFragment] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  \n  // Update filtered fragments when search term or fragments change\n  useEffect(() => {\n    if (!searchTerm.trim()) {\n      setFilteredFragments(fragments);\n      return;\n    }\n    \n    const lowerCaseSearch = searchTerm.toLowerCase();\n    const filtered = fragments.filter(fragment => {\n      // Search in title\n      if (fragment.title.toLowerCase().includes(lowerCaseSearch)) {\n        return true;\n      }\n      \n      // Search in code\n      if (fragment.code.toLowerCase().includes(lowerCaseSearch)) {\n        return true;\n      }\n      \n      // Search in tags\n      if (fragment.tags) {\n        const fragmentTags = tags.filter(tag => fragment.tags.includes(tag.id));\n        return fragmentTags.some(tag => \n          tag.name.toLowerCase().includes(lowerCaseSearch)\n        );\n      }\n      \n      return false;\n    });\n    \n    setFilteredFragments(filtered);\n  }, [searchTerm, fragments, tags]);\n  \n  const handleViewCode = (fragment) => {\n    setSelectedFragment(fragment);\n    setShowModal(true);\n  };\n  \n  const closeModal = () => {\n    setShowModal(false);\n  };\n  \n  // Handle the drag and drop for creating fragments from files\n  const handleDrop = (event) => {\n    event.preventDefault();\n    \n    // Get the dropped files\n    const files = event.dataTransfer.files;\n    \n    if (files.length > 0) {\n      // Read the first file\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const content = e.target.result;\n        const fileName = files[0].name;\n        \n        // Create a new fragment with the file content\n        const newFragment = {\n          title: fileName,\n          code: content,\n          tags: []\n        };\n        \n        // Navigate to the fragment form page with this data\n        // For simplicity we'll just alert here - in a real app you'd use a router\n        alert(`File detected: ${fileName}\\nYou'd be redirected to the fragment form to save this code.`);\n        console.log('New fragment from file:', newFragment);\n      };\n      \n      reader.readAsText(files[0]);\n    }\n  };\n  \n  const handleDragOver = (event) => {\n    event.preventDefault();\n  };\n  \n  return (\n    <div \n      className=\"fragments-page\" \n      onDrop={handleDrop} \n      onDragOver={handleDragOver}\n    >\n      <Header \n        toggleDarkMode={toggleDarkMode} \n        darkMode={darkMode} \n      />\n      \n      <main className=\"content\">\n        {/* Search bar */}\n        <div className=\"search-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Search fragments...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"search-input\"\n          />\n        </div>\n        \n        {/* Fragments list */}\n        {filteredFragments.length === 0 ? (\n          <div className=\"no-fragments\">\n            <p>No fragments found. Create a new one or adjust your search.</p>\n          </div>\n        ) : (\n          <div className=\"fragments-grid\">\n            {filteredFragments.map(fragment => (\n              <FragmentCard\n                key={fragment.id}\n                fragment={fragment}\n                tags={tags}\n                onViewCode={handleViewCode}\n              />\n            ))}\n          </div>\n        )}\n      </main>\n      \n      {/* Code modal */}\n      {showModal && (\n        <CodeModal \n          fragment={selectedFragment} \n          onClose={closeModal}\n          darkMode={darkMode}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default FragmentsPage;",
      "tags": [
        "1741263484490"
      ],
      "id": "1741265765595"
    },
    {
      "title": "Express.js Basic Server Setup",
      "code": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\n// Middleware for parsing JSON\napp.use(express.json());\n\n// Simple GET route\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\n// POST route example\napp.post('/api/data', (req, res) => {\n  const data = req.body;\n  // Process data here\n  res.status(201).json({ message: 'Data received', data });\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});",
      "tags": [
        "1741267099852"
      ],
      "id": "1741265787521"
    },
    {
      "title": " Python List Comprehension",
      "code": "# Basic list comprehension\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Get all even numbers\neven_numbers = [x for x in numbers if x % 2 == 0]\nprint(f\"Even numbers: {even_numbers}\")\n\n# Square all numbers\nsquared_numbers = [x**2 for x in numbers]\nprint(f\"Squared numbers: {squared_numbers}\")\n\n# Conditional expression\nresult = [x if x % 2 == 0 else x*2 for x in numbers]\nprint(f\"Conditionally modified: {result}\")",
      "tags": [
        "1741826519994"
      ],
      "id": "1741826794912"
    },
    {
      "title": "CSS Flexbox Layout Template",
      "code": ".container {\n  display: flex;\n  flex-direction: row; /* or column */\n  justify-content: space-between; /* Options: flex-start, flex-end, center, space-around */\n  align-items: center; /* Options: flex-start, flex-end, stretch, baseline */\n  flex-wrap: wrap; /* Options: nowrap, wrap-reverse */\n  gap: 20px;\n}\n\n.item {\n  flex: 1 1 200px; /* grow | shrink | basis */\n  padding: 20px;\n  background-color: #f0f0f0;\n  border-radius: 5px;\n}\n\n/* Responsive behavior */\n@media (max-width: 768px) {\n  .container {\n    flex-direction: column;\n  }\n}",
      "tags": [
        "1741826536107"
      ],
      "id": "1741826856514"
    },
    {
      "title": "SQL Common Queries Reference",
      "code": "-- Basic SELECT\nSELECT column1, column2 FROM table_name WHERE condition;\n\n-- JOIN example\nSELECT o.order_id, c.customer_name\nFROM orders o\nINNER JOIN customers c ON o.customer_id = c.customer_id\nWHERE o.order_date > '2023-01-01';\n\n-- GROUP BY with aggregation\nSELECT department, COUNT(*) as employee_count, AVG(salary) as avg_salary\nFROM employees\nGROUP BY department\nHAVING COUNT(*) > 5\nORDER BY avg_salary DESC;\n\n-- INSERT statement\nINSERT INTO table_name (column1, column2)\nVALUES (value1, value2);\n\n-- UPDATE statement\nUPDATE table_name\nSET column1 = value1, column2 = value2\nWHERE condition;",
      "tags": [
        "1741826546364"
      ],
      "id": "1741826908703"
    }
  ]